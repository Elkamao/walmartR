MD---
title: "Modern Data Structure Final Project"
author: Elka Mao
date: 2017-11-10
always_allow_html: yes
output: 
  html_document:
    keep_md: true
---

buzzr --- An API Package for Buzzfeed 
============================

```{r}
setwd("/Users/elkamao/Desktop/MD Project")
```


#### 1. Choose an API

I choose the Best Buy Recommendation API. This API provides functions to get and search live headlines, articles, images and other article metadata from Buzzfeed. 

Link to the API documentation https://newsapi.org

Base URL: https://www.googleapis.com/youtube/v3/playlistItems

#### 2. Authentication

The API authenticates the user with API keys.

```{r}
wal_key = "xs9emg846j69q7e9fhbfxz6d"
```

```{r}
library(httr)
library(jsonlite)
```


### 4. Write API Functions

#### Product Lookup 
```{r top headline}
product_lookup <- function(apikey, ids){
  
  querys <-  list(ids = ids, 
                    apiKey = apikey)
  resps <- GET(url = "http://api.walmartlabs.com/v1/items",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resps) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resps),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed)
  saveRDS(df, file = "product_lookup_output.RDS")
}

product_lookup(wal_key, "12417832,19336123")

```

### Item Search
```{r}
item_search <- function(apikey, query, categoryID = NULL, start = NULL, sort = NULL, 
                        order = NULL, numItems = 10, facet = NULL, facet_filter = NULL, 
                        facet_range = NULL){
  
  querys <-  list(query = query,
                  categoryID = categoryID,
                  start = start,
                  sort = sort,
                  numItems = numItems,
                  apiKey = apikey,
                  facet = facet, 
                  facet.filter = facet_filter,
                  facet.range = facet_range)
  resps <- GET(url = "http://api.walmartlabs.com/v1/search",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resps) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resps),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed$item)
  saveRDS(df, file = "item_search_output.RDS")
}

item_search(wal_key, query = "tv", facet = "on", facet_filter = "brand:Samsung")
```

## Taxonomy
```{r}
taxonomy <- function(apikey){
  
  querys <-  list(apiKey = apikey)
  resps <- GET(url = "http://api.walmartlabs.com/v1/taxonomy",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resp_th) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resp_th),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed)
  saveRDS(df, file = "taxonomy_output.RDS")
}

taxonomy(wal_key)
```

### Product Recommendation
```{r}
product_recommendation <- function(apikey, itemId){
  
  querys <-  list(apiKey = apikey,
                  itemId = itemId)
  resps <- GET(url = "http://api.walmartlabs.com/v1/nbp",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resp_th) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resp_th),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed)
  saveRDS(df, file = "product_recommendation_output.RDS")
}

product_recommendation(wal_key, "36904791")
```

### Post Browsed Products Recommendation 
```{r}
postbrowse_recommendation <- function(apikey, itemId){
  
  querys <-  list(apiKey = apikey,
                  itemId = itemId)
  resps <- GET(url = "http://api.walmartlabs.com/v1/postbrowse",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resp_th) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resp_th),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed)
  saveRDS(df, file = "post_browsed_recommendation_output.RDS")
}

postbrowse_recommendation(wal_key, "36904791")
```


### Store Locator
```{r}
store_locator <- function(apikey, city = NULL, lat = NULL, lon = NULL, zip = NULL){
  
  querys <-  list(apiKey = apikey,
                  city = city,
                  lat = lat,
                  lon = lon,
                  zip = zip)
  resps <- GET(url = "http://api.walmartlabs.com/v1/stores",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resp_th) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resp_th),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed)
  saveRDS(df, file = "store_locations_output.RDS")
}

store_locator(wal_key, city = "NEW YORK")
```

## Trending
```{r}
trending <- function(apikey){
  
  querys <-  list(apiKey = apikey)
  resps <- GET(url = "http://api.walmartlabs.com/v1/trends",
                    query = querys)
    if (http_type(resps) != "application/json") {
    stop("API did not return json", call. = FALSE)
    }
  
  parsed <- jsonlite::fromJSON(content(resps, "text"))
  
  
  if (status_code(resp_th) != 200) {
    stop(
      sprintf(
        "Buzzfeed News API request failed", 
        status_code(resp_th),
        parsed$status
      ),
      call. = FALSE
    )
  }
  
  df <- data.frame(parsed)
  saveRDS(df, file = "tredning_output.RDS")
}

trending(wal_key)
```


### 5. Wrap API Functions in Package
```{r}
library(devtools)
library(roxygen2)
library(testthat)
has_devel()
```


